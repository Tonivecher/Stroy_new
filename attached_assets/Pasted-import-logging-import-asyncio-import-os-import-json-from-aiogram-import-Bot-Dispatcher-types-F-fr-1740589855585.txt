import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logging.critical("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ JSON
with open("materials.json", "r", encoding="utf-8") as file:
    materials = json.load(file)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="üìê –ü–ª–æ—â–∞–¥—å")],
        [KeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç")]
    ],
    resize_keyboard=True
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_categories_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for category in materials:
        keyboard.add(InlineKeyboardButton(text=category, callback_data=f"category:{category}"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_subcategories_keyboard(category):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for subcategory in materials[category]:
        keyboard.add(InlineKeyboardButton(text=subcategory, callback_data=f"subcategory:{category}:{subcategory}"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
def get_brands_keyboard(category, subcategory):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for brand in materials[category][subcategory]["brands"]:
        keyboard.add(InlineKeyboardButton(text=brand, callback_data=f"brand:{category}:{subcategory}:{brand}"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_subcategories:{category}"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer_sticker("CAACAgIAAxkBAAIDgGQ4FqZcO6B6Y9zSHG7I7BpluQ4eAAIwAwACMNSRSqPzoO2olPsaNAQ")  # –î–æ–±–∞–≤—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø StroyHelper –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
@dp.message(F.text == "üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials_button(message: types.Message):
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category:"))
async def category_callback(callback: types.CallbackQuery):
    category = callback.data.split(":")[1]
    await callback.answer()
    await callback.message.edit_text(f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_subcategories_keyboard(category))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("subcategory:"))
async def subcategory_callback(callback: types.CallbackQuery):
    _, category, subcategory = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(f"üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=get_brands_keyboard(category, subcategory))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
@dp.callback_query(F.data.startswith("brand:"))
async def brand_callback(callback: types.CallbackQuery):
    _, category, subcategory, brand = callback.data.split(":")
    description = materials[category][subcategory]["description"]
    await callback.answer()
    await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏:\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory}\n<b>–ë—Ä–µ–Ω–¥:</b> {brand}\n\nüì¶ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {description}", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=get_categories_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query(F.data.startswith("back_to_subcategories:"))
async def back_to_subcategories_callback(callback: types.CallbackQuery):
    _, category = callback.data.split(":")
    await callback.answer()
    await callback.message.edit_text(f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_subcategories_keyboard(category))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø StroyHelper –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –û—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())