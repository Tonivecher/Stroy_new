from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.main import get_main_keyboard, get_estimate_keyboard
from keyboards.materials import get_material_keyboard, get_material_categories, get_material_units
from data.materials import save_material, get_user_materials, format_material_info
from states import MaterialState

router = Router()

class RoomState(StatesGroup):
    waiting_for_name = State()
    waiting_for_length = State()
    waiting_for_width = State()
    waiting_for_height = State()

class MaterialCalculationState(StatesGroup):
    waiting_for_room = State()
    waiting_for_material = State()
    waiting_for_surface = State()
    waiting_for_quantity = State()

@router.message(CommandStart())
@router.message(Command("start"))
async def handle_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É —Ä–µ–º–æ–Ω—Ç–∞. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    await message.answer(
        "üîç <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è\n"
        "4. –£–∫–∞–∂–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞\n\n"
        "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–º–µ—â–µ–Ω–∏—è'.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üî≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å")
async def handle_calculate_area(message: Message, state: FSMContext):
    """Handle area calculation request."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ü–æ–º–µ—â–µ–Ω–∏–µ")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:",
        reply_markup=keyboard
    )

@router.message(F.text == "üè† –ú–æ–∏ –ø–æ–º–µ—â–µ–Ω–∏—è")
async def handle_my_rooms(message: Message):
    """Handle my rooms request."""
    from data.rooms import get_user_rooms, format_room_info
    
    rooms = get_user_rooms(message.from_user.id)
    if not rooms:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üî≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    response_text = "üìã –í–∞—à–∏ –ø–æ–º–µ—â–µ–Ω–∏—è:\n\n"
    for room in rooms:
        response_text += format_room_info(room) + "\n"
    
    await message.answer(response_text, reply_markup=get_main_keyboard())

@router.message(F.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def handle_materials(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:",
        reply_markup=get_material_keyboard()
    )

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def handle_add_material(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_material_categories()
    )
    await state.set_state(MaterialState.waiting_for_category)

@router.message(MaterialState.waiting_for_category)
async def handle_material_category(message: Message, state: FSMContext):
    category = message.text
    if category not in ["–°—Ç–µ–Ω—ã", "–ü–æ—Ç–æ–ª–æ–∫", "–ü–æ–ª", "–î–≤–µ—Ä–∏", "–û–∫–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(MaterialState.waiting_for_name)

@router.message(MaterialState.waiting_for_name)
async def handle_material_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:",
        reply_markup=get_material_units()
    )
    await state.set_state(MaterialState.waiting_for_unit)

@router.message(MaterialState.waiting_for_unit)
async def handle_material_unit(message: Message, state: FSMContext):
    unit = message.text
    if unit not in ["–º¬≤", "–º¬≥", "—à—Ç", "–∫–≥", "–ª"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(unit=unit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:")
    await state.set_state(MaterialState.waiting_for_price)

@router.message(MaterialState.waiting_for_price)
async def handle_material_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    material = {
        "category": data["category"],
        "name": data["name"],
        "unit": data["unit"],
        "price": price
    }
    
    save_material(message.from_user.id, material)
    await message.answer(
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n{format_material_info(material)}",
        reply_markup=get_material_keyboard()
    )
    await state.clear()

@router.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def handle_show_materials(message: Message):
    materials = get_user_materials(message.from_user.id)
    if not materials:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
    
    text = "–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for material in materials:
        text += format_material_info(material) + "\n\n"
    
    await message.answer(text, reply_markup=get_material_keyboard())

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üè† –ü–æ–º–µ—â–µ–Ω–∏–µ")
async def handle_add_room(message: Message, state: FSMContext):
    """Handle add room request."""
    await state.set_state(RoomState.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
    )

@router.message(RoomState.waiting_for_name)
async def handle_room_name(message: Message, state: FSMContext):
    """Handle room name input."""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
    
    await state.update_data(name=message.text)
    await state.set_state(RoomState.waiting_for_length)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:")

@router.message(RoomState.waiting_for_length)
async def handle_room_length(message: Message, state: FSMContext):
    """Handle room length input."""
    try:
        length = float(message.text.replace(',', '.'))
        await state.update_data(length=length)
        await state.set_state(RoomState.waiting_for_width)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3.5):")

@router.message(RoomState.waiting_for_width)
async def handle_room_width(message: Message, state: FSMContext):
    """Handle room width input."""
    try:
        width = float(message.text.replace(',', '.'))
        await state.update_data(width=width)
        await state.set_state(RoomState.waiting_for_height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 2.5 –º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")

@router.message(RoomState.waiting_for_height)
async def handle_room_height(message: Message, state: FSMContext):
    """Handle room height input."""
    try:
        height = float(message.text.replace(',', '.'))
        data = await state.get_data()
        
        # Calculate areas
        floor_area = data['length'] * data['width']
        total_area = 2 * (data['length'] + data['width']) * height + floor_area
        
        # Create and save room
        from data.rooms import Room, save_room
        from datetime import datetime
        
        room = Room(
            name=data['name'],
            length=data['length'],
            width=data['width'],
            height=height,
            area=total_area,
            floor_area=floor_area,
            created_at=datetime.now()
        )
        save_room(message.from_user.id, room)
        
        await message.answer(
            f"‚úÖ –ü–æ–º–µ—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"üìè –î–ª–∏–Ω–∞: {data['length']} –º\n"
            f"üìè –®–∏—Ä–∏–Ω–∞: {data['width']} –º\n"
            f"üìè –í—ã—Å–æ—Ç–∞: {height} –º\n"
            f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {total_area:.2f} –º¬≤\n"
            f"üìê –ü–ª–æ—â–∞–¥—å –ø–æ–ª–∞: {floor_area:.2f} –º¬≤",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")

@router.message(F.text == "üßÆ –†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def handle_material_calculation(message: Message, state: FSMContext):
    """Handle material calculation request."""
    from data.rooms import get_user_rooms, format_room_info
    
    rooms = get_user_rooms(message.from_user.id)
    if not rooms:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.\n\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–µ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üî≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è\n"
            "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Create keyboard with room names and their areas
    keyboard = []
    rooms_info = "üìã –í–∞—à–∏ –ø–æ–º–µ—â–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø–ª–æ—â–∞–¥–∏:\n\n"
    
    for room in rooms:
        if room.area > 0:  # Only show rooms with calculated area
            rooms_info += format_room_info(room) + "\n"
            keyboard.append([KeyboardButton(text=f"{room.name} ({room.area:.1f} –º¬≤)")])
    
    if not keyboard:  # If no rooms have area calculations
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–º–µ—â–µ–Ω–∏–π —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é.\n\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üî≤ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è\n"
            "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            reply_markup=get_main_keyboard()
        )
        return
    
    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    await state.set_state(MaterialCalculationState.waiting_for_room)
    await message.answer(
        rooms_info + "\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MaterialCalculationState.waiting_for_room)
async def handle_calculation_room(message: Message, state: FSMContext):
    """Handle room selection for material calculation."""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
    
    from data.rooms import get_user_rooms
    from data.materials import get_user_materials
    
    rooms = get_user_rooms(message.from_user.id)
    materials = get_user_materials(message.from_user.id)
    
    # Extract room name from the button text (remove area info)
    room_name = message.text.split(" (")[0]
    
    # Find selected room
    selected_room = next((room for room in rooms if room.name == room_name), None)
    if not selected_room:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if not materials:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üìù –ú–∞—Ç–µ—Ä–∏–∞–ª—ã'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ 'üìù –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª'\n"
            "3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # Create keyboard with material names and their units
    keyboard = []
    for material in materials:
        keyboard.append([KeyboardButton(text=f"{material.name} ({material.unit})")])
    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    await state.update_data(room=selected_room)
    await state.set_state(MaterialCalculationState.waiting_for_material)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ: {selected_room.name}\n\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {selected_room.area:.2f} –º¬≤\n"
        f"üìè –û–±—ä–µ–º: {selected_room.area * selected_room.height:.2f} –º¬≥\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MaterialCalculationState.waiting_for_material)
async def handle_calculation_material(message: Message, state: FSMContext):
    """Handle material selection for calculation."""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
    
    from data.materials import get_user_materials
    
    materials = get_user_materials(message.from_user.id)
    
    # Extract material name from the button text (remove unit info)
    material_name = message.text.split(" (")[0]
    
    selected_material = next((m for m in materials if m.name == material_name), None)
    if not selected_material:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(material=selected_material)
    await state.set_state(MaterialCalculationState.waiting_for_surface)
    
    # Create keyboard with surface types
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üß± –°—Ç–µ–Ω—ã")],
            [KeyboardButton(text="‚¨ú –ü–æ–ª")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª: {selected_material.name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )

@router.message(MaterialCalculationState.waiting_for_surface)
async def handle_calculation_surface(message: Message, state: FSMContext):
    """Handle surface type selection for material calculation."""
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return
    
    if message.text not in ["üß± –°—Ç–µ–Ω—ã", "‚¨ú –ü–æ–ª"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    data = await state.get_data()
    room = data['room']
    material = data['material']
    
    # Calculate area based on surface type
    if message.text == "üß± –°—Ç–µ–Ω—ã":
        area = 2 * (room.length + room.width) * room.height
    else:  # –ü–æ–ª
        area = room.length * room.width
    
    # Calculate required quantity based on material unit
    if material.unit == "–º¬≤":
        quantity = area
    elif material.unit == "–º¬≥":
        quantity = area * room.height
    else:
        quantity = 1  # Default for other units
    
    total_cost = quantity * material.price
    
    surface_type = "—Å—Ç–µ–Ω" if message.text == "üß± –°—Ç–µ–Ω—ã" else "–ø–æ–ª–∞"
    
    await message.answer(
        f"üìä –†–∞—Å—á–µ—Ç –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ '{material.name}':\n\n"
        f"üè† –ü–æ–º–µ—â–µ–Ω–∏–µ: {room.name}\n"
        f"üìè –ü–ª–æ—â–∞–¥—å {surface_type}: {area:.2f} –º¬≤\n"
        f"üì¶ –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.2f} {material.unit}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f} ‚ÇΩ\n\n"
        f"–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üßÆ –†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

# Fallback handler for unrecognized text messages
@router.message(F.text)
async def handle_text(message: Message):
    """Handle unrecognized text messages."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help, "
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    ) 