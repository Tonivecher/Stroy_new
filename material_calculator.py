import logging
import asyncio
import os
import datetime
from decimal import Decimal, ROUND_HALF_UP
from typing import Dict, List, Optional, Union, Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, FSInputFile
)
import aiosqlite
import fpdf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_UNIT = "–º"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
UNITS = {"–º": 1, "—Å–º": 0.01, "–º–º": 0.001}
MATERIAL_TYPES = ["–û–±–æ–∏", "–ü–ª–∏—Ç–∫–∞", "–õ–∞–º–∏–Ω–∞—Ç", "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞", "–ö—Ä–∞—Å–∫–∞", "–ù–∞–ª–∏–≤–Ω–æ–π –ø–æ–ª"]

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AreaCalculator(StatesGroup):
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è
    waiting_for_room_length = State()
    waiting_for_room_width = State()
    waiting_for_room_height = State()

    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    select_unit = State()

    # –í—ã—á–µ—Ç—ã
    ask_for_deduction = State()
    deduction_type = State()
    deduction_length = State()
    deduction_width = State()

    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    select_material = State()
    material_thickness = State()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞–º–∏
    saving_calculation = State()
    manage_calculations = State()
    export_format = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("area_calculator.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS calculations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                room_length REAL NOT NULL,
                room_width REAL NOT NULL,
                room_height REAL,
                unit TEXT NOT NULL,
                total_area REAL NOT NULL,
                net_area REAL NOT NULL,
                material_type TEXT,
                material_thickness REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS deductions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                calculation_id INTEGER NOT NULL,
                type TEXT NOT NULL,
                length REAL NOT NULL,
                width REAL NOT NULL,
                area REAL NOT NULL,
                FOREIGN KEY (calculation_id) REFERENCES calculations (id) ON DELETE CASCADE
            )
        ''')
        
        await db.commit()

async def save_calculation(user_id: int, data: Dict[str, Any]) -> int:
    async with aiosqlite.connect("area_calculator.db") as db:
        cursor = await db.execute('''
            INSERT INTO calculations (user_id, room_length, room_width, room_height, unit, total_area, net_area, material_type, material_thickness)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            data.get("room_length", 0),
            data.get("room_width", 0),
            data.get("room_height", 0),
            data.get("unit", DEFAULT_UNIT),
            data.get("total_area", 0),
            data.get("net_area", 0),
            data.get("material_type", ""),
            data.get("material_thickness", 0)
        ))
        await db.commit()
        calculation_id = cursor.lastrowid

        if "deductions" in data and data["deductions"]:
            for deduction in data["deductions"]:
                await db.execute('''
                    INSERT INTO deductions (calculation_id, type, length, width, area)
                    VALUES (?, ?, ?, ?, ?)
                ''', (
                    calculation_id,
                    deduction.get("type", ""),
                    deduction.get("length", 0),
                    deduction.get("width", 0),
                    deduction.get("area", 0)
                ))
            await db.commit()
        
        return calculation_id

async def get_user_calculations(user_id: int) -> List[Dict[str, Any]]:
    async with aiosqlite.connect("area_calculator.db") as db:
        db.row_factory = aiosqlite.Row
        calculations = []

        async with db.execute(
            "SELECT * FROM calculations WHERE user_id = ? ORDER BY created_at DESC",
            (user_id,)
        ) as cursor:
            async for row in cursor:
                calculation = dict(row)
                calculation["deductions"] = []
                
                async with db.execute(
                    "SELECT * FROM deductions WHERE calculation_id = ?",
                    (row["id"],)
                ) as deductions_cursor:
                    async for deduction_row in deductions_cursor:
                        calculation["deductions"].append(dict(deduction_row))
                
                calculations.append(calculation)
        
        return calculations

async def delete_calculation(calculation_id: int) -> bool:
    async with aiosqlite.connect("area_calculator.db") as db:
        await db.execute("DELETE FROM calculations WHERE id = ?", (calculation_id,))
        await db.commit()
        return True

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def convert_to_meters(value: float, unit: str) -> float:
    return value * UNITS.get(unit, 1)

def format_area(area: float, unit: str) -> str:
    if unit == "–º":
        return f"{round(area, 2)} –º¬≤"
    elif unit == "—Å–º":
        return f"{round(area * 10000, 2)} —Å–º¬≤"
    elif unit == "–º–º":
        return f"{round(area * 1000000, 2)} –º–º¬≤"
    return f"{round(area, 2)} –º¬≤"

def format_volume(volume: float, unit: str, thickness_unit: str = None) -> str:
    if thickness_unit and thickness_unit != unit:
        volume = volume * (UNITS.get(thickness_unit, 1) / UNITS.get(unit, 1))

    if unit == "–º":
        return f"{round(volume, 3)} –º¬≥"
    elif unit == "—Å–º":
        return f"{round(volume * 1000000, 2)} —Å–º¬≥"
    elif unit == "–º–º":
        return f"{round(volume * 1000000000, 2)} –º–º¬≥"
    return f"{round(volume, 3)} –º¬≥"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üßÆ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç")],
        [KeyboardButton(text="üìã –ú–æ–∏ —Ä–∞—Å—á–µ—Ç—ã"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_unit_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="–ú–µ—Ç—Ä—ã (–º)", callback_data="unit_–º"),
            InlineKeyboardButton(text="–°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã (—Å–º)", callback_data="unit_—Å–º"),
            InlineKeyboardButton(text="–ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã (–º–º)", callback_data="unit_–º–º")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_yes_no_keyboard(prefix: str) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="–î–∞", callback_data=f"{prefix}_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"{prefix}_no")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deduction_type_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–û–∫–Ω–æ", callback_data="deduction_window")],
        [InlineKeyboardButton(text="–î–≤–µ—Ä—å", callback_data="deduction_door")],
        [InlineKeyboardButton(text="–ö–æ–ª–æ–Ω–Ω–∞", callback_data="deduction_column")],
        [InlineKeyboardButton(text="–ù–∏—à–∞", callback_data="deduction_niche")],
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã—á–µ—Ç—ã", callback_data="deduction_done")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_material_keyboard() -> InlineKeyboardMarkup:
    buttons = []
    for i in range(0, len(MATERIAL_TYPES), 2):
        row = []
        row.append(InlineKeyboardButton(text=MATERIAL_TYPES[i], callback_data=f"material_{MATERIAL_TYPES[i]}"))
        if i + 1 < len(MATERIAL_TYPES):
            row.append(InlineKeyboardButton(text=MATERIAL_TYPES[i + 1], callback_data=f"material_{MATERIAL_TYPES[i + 1]}"))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="material_skip")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_export_format_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram", callback_data="export_message"),
            InlineKeyboardButton(text="PDF –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="export_pdf")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        "–Ø —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–ª–æ—â–∞–¥–∏ –¥–ª—è Stroyhelper. "
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã—á–µ—Ç–æ–≤, "
        "–ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∏</b>\n\n"
        "üßÆ <b>–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç</b> - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ:\n"
        "   - –í—ã–±—Ä–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        "   - –í–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è\n"
        "   - –î–æ–±–∞–≤–∏—Ç—å –≤—ã—á–µ—Ç—ã (–æ–∫–Ω–∞, –¥–≤–µ—Ä–∏ –∏ —Ç.–¥.)\n"
        "   - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n"
        "   - –£–∫–∞–∑–∞—Ç—å —Ç–æ–ª—â–∏–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n\n"
        "üìã <b>–ú–æ–∏ —Ä–∞—Å—á–µ—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "   - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ª—é–±–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞\n"
        "   - –£–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã\n"
        "   - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç (–∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ PDF)\n\n"
        "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è, "
        "–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
    )
    await message.answer(help_text, reply_markup=get_main_keyboard())

@router.message(F.text == "üßÆ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç")
async def start_new_calculation(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(deductions=[], unit=DEFAULT_UNIT)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:",
        reply_markup=get_unit_keyboard()
    )
    await state.set_state(AreaCalculator.select_unit)

@router.message(F.text == "üìã –ú–æ–∏ —Ä–∞—Å—á–µ—Ç—ã")
async def show_calculations(message: Message, state: FSMContext):
    calculations = await get_user_calculations(message.from_user.id)

    if not calculations:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç, "
            "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üßÆ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç'.", reply_markup=get_main_keyboard()
        )
        return

    buttons = []
    for calc in calculations[:10]:
        created_at = datetime.datetime.fromisoformat(calc["created_at"].replace('Z', '+00:00'))
        formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
        area_text = f"{format_area(calc['net_area'], calc['unit'])} - {formatted_date}"
        buttons.append([InlineKeyboardButton(text=area_text, callback_data=f"view_calc_{calc['id']}")])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(AreaCalculator.manage_calculations)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
@router.callback_query(F.data.startswith("unit_"))
async def process_unit_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    unit = callback.data.split("_")[1]
    await state.update_data(unit=unit)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: {unit}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–º–µ—â–µ–Ω–∏—è (–≤ {unit}):"
    )
    await state.set_state(AreaCalculator.waiting_for_room_length)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.message.delete()

@router.callback_query(F.data.startswith("view_calc_"))
async def view_calculation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    calc_id = int(callback.data.split("_")[2])

    calculations = await get_user_calculations(callback.from_user.id)
    calculation = next((c for c in calculations if c["id"] == calc_id), None)

    if not calculation:
        await callback.message.edit_text(
            "–†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_calculations")]
            ])
        )
        return

    total_area = calculation["total_area"]
    net_area = calculation["net_area"]
    unit = calculation["unit"]

    text = [
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–µ #{calculation['id']}</b>",
        f"üìè –†–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è: {calculation['room_length']} √ó {calculation['room_width']} {unit}",
        f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {format_area(total_area, unit)}",
        f"üßÆ –ü–ª–æ—â–∞–¥—å —Å —É—á–µ—Ç–æ–º –≤—ã—á–µ—Ç–æ–≤: {format_area(net_area, unit)}"
    ]

    if calculation["room_height"]:
        text.append(f"üè¢ –í—ã—Å–æ—Ç–∞: {calculation['room_height']} {unit}")
        
        wall_perimeter = 2 * (calculation['room_length'] + calculation['room_width'])
        wall_area = wall_perimeter * calculation['room_height']
        text.append(f"üß± –ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω: {format_area(wall_area, unit)}")

    if calculation["material_type"]:
        text.append(f"üß∞ –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {calculation['material_type']}")
        
        if calculation["material_thickness"]:
            text.append(f"üìè –¢–æ–ª—â–∏–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {calculation['material_thickness']} {unit}")
            
            material_volume = net_area * calculation['material_thickness']
            text.append(f"üì¶ –û–±—ä–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {format_volume(material_volume, unit)}")

    if calculation["deductions"]:
        text.append("\n<b>–í—ã—á–µ—Ç—ã:</b>")
        for i, deduction in enumerate(calculation["deductions"], 1):
            deduction_type_names = {
                "window": "–û–∫–Ω–æ",
                "door": "–î–≤–µ—Ä—å",
                "column": "–ö–æ–ª–æ–Ω–Ω–∞",
                "niche": "–ù–∏—à–∞"
            }
            deduction_type = deduction_type_names.get(deduction["type"], deduction["type"])
            text.append(
                f"{i}. {deduction_type}: {deduction['length']} √ó {deduction['width']} {unit} "
                f"({format_area(deduction['area'], unit)})"
            )

    created_at = datetime.datetime.fromisoformat(calculation["created_at"].replace('Z', '+00:00'))
    formatted_date = created_at.strftime("%d.%–º.%Y %H:%M")
    text.append(f"\nüìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {formatted_date}")

    buttons = [
        [
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"export_calc_{calc_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_calc_{calc_id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_calculations")]
    ]

    await callback.message.edit_text(
        "\n".join(text),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@router.callback_query(F.data == "back_to_calculations")
async def back_to_calculations(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_calculations(callback.message, state)
    await callback.message.delete()

@router.callback_query(F.data.startswith("delete_calc_"))
async def confirm_delete_calculation(callback: CallbackQuery):
    await callback.answer()
    calc_id = int(callback.data.split("_")[2])

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—á–µ—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{calc_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"view_calc_{calc_id}")
            ]
        ])
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_calculation_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    calc_id = int(callback.data.split("_")[2])

    result = await delete_calculation(calc_id)

    if result:
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_calculations")]
            ])
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [