import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "YOUR_BOT_TOKEN"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å")],
        [KeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="üí∞ –û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")],
        [KeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏")],
    ],
    resize_keyboard=True
)

# –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
materials = {
    "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω": 3.5,
    "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ (–≥–∏–ø—Å–æ–≤–∞—è)": 2.0,
    "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ (—Ü–µ–º–µ–Ω—Ç–Ω–∞—è)": 2.5,
    "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞": 1.8,
    "–õ–∞–º–∏–Ω–∞—Ç": 1.2,
    "–û–±–æ–∏ (–≤–∏–Ω–∏–ª–æ–≤—ã–µ)": 0.9,
    "–î–°–ü / –ú–î–§": 3.0,
    "–ö—Ä–∞—Å–∫–∞ (–ª–∞—Ç–µ–∫—Å–Ω–∞—è)": 1.5,
    "–ú–∏–Ω–≤–∞—Ç–∞": 1.7
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø StroyHelper ‚Äî –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏
@dp.message(lambda message: message.text == "üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å")
async def calculate_area(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2 4.8):")

    @dp.message()
    async def get_dimensions(msg: types.Message):
        try:
            width, length = map(float, msg.text.split())
            area = width * length
            await msg.answer(f"–ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã: {area:.2f} –º¬≤")
        except ValueError:
            await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@dp.message(lambda message: message.text == "üîç –í—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def list_materials(message: types.Message):
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
    for mat, price in materials.items():
        text += f"‚Ä¢ {mat} ‚Äî {price} —Ä—É–±./–º¬≤\n"
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@dp.message(lambda message: message.text == "üí∞ –û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def estimate_cost(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–ª–æ—â–∞–¥—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∏–Ω–∞—Ç 25):")

    @dp.message()
    async def get_cost(msg: types.Message):
        try:
            material, area = msg.text.rsplit(maxsplit=1)
            area = float(area)
            if material in materials:
                cost = materials[material] * area
                await msg.answer(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} —Ä—É–±.")
            else:
                await msg.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        except ValueError:
            await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–ª–æ—â–∞–¥—å.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())